package de.ml.foodcare.data;

import de.ml.foodcare.model.BLS;
import de.ml.foodcare.model.BLSReduced;
import java.util.List;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.*;
import org.springframework.data.repository.query.Param;

/**
 *
 * @author mathi
 */
public interface BLSRepository extends ListCrudRepository<BLS, Long>{
    
    List<BLS> findBySBLS(String SBLS);
    List<BLS> findByST(String ST);
    List<BLS> findBySTE(String STE);
    
    boolean existsBLSBySBLS(String sbls);
    
    @Query(value = "SELECT row_number() over(order by substring(b.sbls, 1, 2)) as bls_id, null as st, null as ste, substring(b.sbls, 1, 2) as sbls , MAX(b.GCAL) as GCAL, MAX(b.GJ) as GJ, MAX(b.GCALZB) as GCALZB, MAX(b.GJZB) as GJZB, MAX(b.ZW) as ZW, MAX(b.ZE) as ZE, MAX(b.ZF) as ZF, MAX(b.ZK) as ZK, MAX(b.ZB) as ZB, MAX(b.ZM) as ZM, MAX(b.ZO) as ZO, MAX(b.ZA) as ZA, MAX(b.VA) as VA, MAX(b.VAR) as VAR, MAX(b.VAC) as VAC, MAX(b.VD) as VD, MAX(b.VE) as VE, MAX(b.VEAT) as VEAT, MAX(b.VK) as VK, MAX(b.VB1) as VB1, MAX(b.VB2) as VB2, MAX(b.VB3) as VB3, MAX(b.VB3A) as VB3A, MAX(b.VB5) as VB5, MAX(b.VB6) as VB6, MAX(b.VB7) as VB7, MAX(b.VB9G) as VB9G, MAX(b.VB12) as VB12, MAX(b.VC) as VC, MAX(b.MNA) as MNA, MAX(b.MK) as MK, MAX(b.MCA) as MCA, MAX(b.MMG) as MMG, MAX(b.MP) as MP, MAX(b.MS) as MS, MAX(b.MCL) as MCL, MAX(b.MFE) as MFE, MAX(b.MZN) as MZN, MAX(b.MCU) as MCU, MAX(b.MMN) as MMN, MAX(b.MF) as MF, MAX(b.MJ) as MJ, MAX(b.KAM) as KAM, MAX(b.KAS) as KAS, MAX(b.KAX) as KAX, MAX(b.KA) as KA, MAX(b.KMT) as KMT, MAX(b.KMF) as KMF, MAX(b.KMG) as KMG, MAX(b.KM) as KM, MAX(b.KDS) as KDS, MAX(b.KDM) as KDM, MAX(b.KDL) as KDL, MAX(b.KD) as KD, MAX(b.KMD) as KMD, MAX(b.KPOR) as KPOR, MAX(b.KPON) as KPON, MAX(b.KPG) as KPG, MAX(b.KPS) as KPS, MAX(b.KP) as KP, MAX(b.KBP) as KBP, MAX(b.KBH) as KBH, MAX(b.KBU) as KBU, MAX(b.KBC) as KBC, MAX(b.KBL) as KBL, MAX(b.KBW) as KBW, MAX(b.KBN) as KBN, MAX(b.EILE) as EILE, MAX(b.ELEU) as ELEU, MAX(b.ELYS) as ELYS, MAX(b.EMET) as EMET, MAX(b.ECYS) as ECYS, MAX(b.EPHE) as EPHE, MAX(b.ETYR) as ETYR, MAX(b.ETHR) as ETHR, MAX(b.ETRP) as ETRP, MAX(b.EVAL) as EVAL, MAX(b.EARG) as EARG, MAX(b.EHIS) as EHIS, MAX(b.EEA) as EEA, MAX(b.EALA) as EALA, MAX(b.EASP) as EASP, MAX(b.EGLU) as EGLU, MAX(b.EGLY) as EGLY, MAX(b.EPRO) as EPRO, MAX(b.ESER) as ESER, MAX(b.ENA) as ENA, MAX(b.EH) as EH, MAX(b.EP) as EP, MAX(b.F40) as F40, MAX(b.F60) as F60, MAX(b.F80) as F80, MAX(b.F100) as F100, MAX(b.F120) as F120, MAX(b.F140) as F140, MAX(b.F150) as F150, MAX(b.F160) as F160, MAX(b.F170) as F170, MAX(b.F180) as F180, MAX(b.F200) as F200, MAX(b.F220) as F220, MAX(b.F240) as F240, MAX(b.FS) as FS, MAX(b.F141) as F141, MAX(b.F151) as F151, MAX(b.F161) as F161, MAX(b.F171) as F171, MAX(b.F181) as F181, MAX(b.F201) as F201, MAX(b.F221) as F221, MAX(b.F241) as F241, MAX(b.FU) as FU, MAX(b.F162) as F162, MAX(b.F164) as F164, MAX(b.F182) as F182, MAX(b.F183) as F183, MAX(b.F184) as F184, MAX(b.F193) as F193, MAX(b.F202) as F202, MAX(b.F203) as F203, MAX(b.F204) as F204, MAX(b.F205) as F205, MAX(b.F222) as F222, MAX(b.F223) as F223, MAX(b.F224) as F224, MAX(b.F225) as F225, MAX(b.F226) as F226, MAX(b.FP) as FP, MAX(b.FK) as FK, MAX(b.FM) as FM, MAX(b.FL) as FL, MAX(b.FO3) as FO3, MAX(b.FO6) as FO6, MAX(b.FG) as FG, MAX(b.FC) as FC, MAX(b.GFPS) as GFPS, MAX(b.GKB) as GKB, MAX(b.GMKO) as GMKO, MAX(b.GP) as GP FROM Bls b GROUP BY substring(b.sbls, 1, 2)", nativeQuery = true)
    List<BLS> findMaxValuesUG();
    
    @Query(value = "SELECT row_number() over(order by substring(b.sbls, 1, 2)) as bls_id, null as st, null as ste, substring(b.sbls, 1, 2) as sbls , AVG(b.GCAL) as GCAL, AVG(b.GJ) as GJ, AVG(b.GCALZB) as GCALZB, AVG(b.GJZB) as GJZB, AVG(b.ZW) as ZW, AVG(b.ZE) as ZE, AVG(b.ZF) as ZF, AVG(b.ZK) as ZK, AVG(b.ZB) as ZB, AVG(b.ZM) as ZM, AVG(b.ZO) as ZO, AVG(b.ZA) as ZA, AVG(b.VA) as VA, AVG(b.VAR) as VAR, AVG(b.VAC) as VAC, AVG(b.VD) as VD, AVG(b.VE) as VE, AVG(b.VEAT) as VEAT, AVG(b.VK) as VK, AVG(b.VB1) as VB1, AVG(b.VB2) as VB2, AVG(b.VB3) as VB3, AVG(b.VB3A) as VB3A, AVG(b.VB5) as VB5, AVG(b.VB6) as VB6, AVG(b.VB7) as VB7, AVG(b.VB9G) as VB9G, AVG(b.VB12) as VB12, AVG(b.VC) as VC, AVG(b.MNA) as MNA, AVG(b.MK) as MK, AVG(b.MCA) as MCA, AVG(b.MMG) as MMG, AVG(b.MP) as MP, AVG(b.MS) as MS, AVG(b.MCL) as MCL, AVG(b.MFE) as MFE, AVG(b.MZN) as MZN, AVG(b.MCU) as MCU, AVG(b.MMN) as MMN, AVG(b.MF) as MF, AVG(b.MJ) as MJ, AVG(b.KAM) as KAM, AVG(b.KAS) as KAS, AVG(b.KAX) as KAX, AVG(b.KA) as KA, AVG(b.KMT) as KMT, AVG(b.KMF) as KMF, AVG(b.KMG) as KMG, AVG(b.KM) as KM, AVG(b.KDS) as KDS, AVG(b.KDM) as KDM, AVG(b.KDL) as KDL, AVG(b.KD) as KD, AVG(b.KMD) as KMD, AVG(b.KPOR) as KPOR, AVG(b.KPON) as KPON, AVG(b.KPG) as KPG, AVG(b.KPS) as KPS, AVG(b.KP) as KP, AVG(b.KBP) as KBP, AVG(b.KBH) as KBH, AVG(b.KBU) as KBU, AVG(b.KBC) as KBC, AVG(b.KBL) as KBL, AVG(b.KBW) as KBW, AVG(b.KBN) as KBN, AVG(b.EILE) as EILE, AVG(b.ELEU) as ELEU, AVG(b.ELYS) as ELYS, AVG(b.EMET) as EMET, AVG(b.ECYS) as ECYS, AVG(b.EPHE) as EPHE, AVG(b.ETYR) as ETYR, AVG(b.ETHR) as ETHR, AVG(b.ETRP) as ETRP, AVG(b.EVAL) as EVAL, AVG(b.EARG) as EARG, AVG(b.EHIS) as EHIS, AVG(b.EEA) as EEA, AVG(b.EALA) as EALA, AVG(b.EASP) as EASP, AVG(b.EGLU) as EGLU, AVG(b.EGLY) as EGLY, AVG(b.EPRO) as EPRO, AVG(b.ESER) as ESER, AVG(b.ENA) as ENA, AVG(b.EH) as EH, AVG(b.EP) as EP, AVG(b.F40) as F40, AVG(b.F60) as F60, AVG(b.F80) as F80, AVG(b.F100) as F100, AVG(b.F120) as F120, AVG(b.F140) as F140, AVG(b.F150) as F150, AVG(b.F160) as F160, AVG(b.F170) as F170, AVG(b.F180) as F180, AVG(b.F200) as F200, AVG(b.F220) as F220, AVG(b.F240) as F240, AVG(b.FS) as FS, AVG(b.F141) as F141, AVG(b.F151) as F151, AVG(b.F161) as F161, AVG(b.F171) as F171, AVG(b.F181) as F181, AVG(b.F201) as F201, AVG(b.F221) as F221, AVG(b.F241) as F241, AVG(b.FU) as FU, AVG(b.F162) as F162, AVG(b.F164) as F164, AVG(b.F182) as F182, AVG(b.F183) as F183, AVG(b.F184) as F184, AVG(b.F193) as F193, AVG(b.F202) as F202, AVG(b.F203) as F203, AVG(b.F204) as F204, AVG(b.F205) as F205, AVG(b.F222) as F222, AVG(b.F223) as F223, AVG(b.F224) as F224, AVG(b.F225) as F225, AVG(b.F226) as F226, AVG(b.FP) as FP, AVG(b.FK) as FK, AVG(b.FM) as FM, AVG(b.FL) as FL, AVG(b.FO3) as FO3, AVG(b.FO6) as FO6, AVG(b.FG) as FG, AVG(b.FC) as FC, AVG(b.GFPS) as GFPS, AVG(b.GKB) as GKB, AVG(b.GMKO) as GMKO, AVG(b.GP) as GP FROM Bls b GROUP BY substring(b.sbls, 1, 2)", nativeQuery = true)
    List<BLS> findAvgValuesUG();
    
    @Query(value = "SELECT row_number() over(order by substring(b.sbls, 1, 2)) as bls_id, null as st, null as ste, substring(b.sbls, 1, 2) as sbls , MAX(b.GCAL) as GCAL, MAX(b.GJ) as GJ, MAX(b.GCALZB) as GCALZB, MAX(b.GJZB) as GJZB, MAX(b.ZW) as ZW, MAX(b.ZE) as ZE, MAX(b.ZF) as ZF, MAX(b.ZK) as ZK, MAX(b.ZB) as ZB, MAX(b.ZM) as ZM, MAX(b.ZO) as ZO, MAX(b.ZA) as ZA, MAX(b.VA) as VA, MAX(b.VAR) as VAR, MAX(b.VAC) as VAC, MAX(b.VD) as VD, MAX(b.VE) as VE, MAX(b.VEAT) as VEAT, MAX(b.VK) as VK, MAX(b.VB1) as VB1, MAX(b.VB2) as VB2, MAX(b.VB3) as VB3, MAX(b.VB3A) as VB3A, MAX(b.VB5) as VB5, MAX(b.VB6) as VB6, MAX(b.VB7) as VB7, MAX(b.VB9G) as VB9G, MAX(b.VB12) as VB12, MAX(b.VC) as VC, MAX(b.MNA) as MNA, MAX(b.MK) as MK, MAX(b.MCA) as MCA, MAX(b.MMG) as MMG, MAX(b.MP) as MP, MAX(b.MS) as MS, MAX(b.MCL) as MCL, MAX(b.MFE) as MFE, MAX(b.MZN) as MZN, MAX(b.MCU) as MCU, MAX(b.MMN) as MMN, MAX(b.MF) as MF, MAX(b.MJ) as MJ, MAX(b.KAM) as KAM, MAX(b.KAS) as KAS, MAX(b.KAX) as KAX, MAX(b.KA) as KA, MAX(b.KMT) as KMT, MAX(b.KMF) as KMF, MAX(b.KMG) as KMG, MAX(b.KM) as KM, MAX(b.KDS) as KDS, MAX(b.KDM) as KDM, MAX(b.KDL) as KDL, MAX(b.KD) as KD, MAX(b.KMD) as KMD, MAX(b.KPOR) as KPOR, MAX(b.KPON) as KPON, MAX(b.KPG) as KPG, MAX(b.KPS) as KPS, MAX(b.KP) as KP, MAX(b.KBP) as KBP, MAX(b.KBH) as KBH, MAX(b.KBU) as KBU, MAX(b.KBC) as KBC, MAX(b.KBL) as KBL, MAX(b.KBW) as KBW, MAX(b.KBN) as KBN, MAX(b.EILE) as EILE, MAX(b.ELEU) as ELEU, MAX(b.ELYS) as ELYS, MAX(b.EMET) as EMET, MAX(b.ECYS) as ECYS, MAX(b.EPHE) as EPHE, MAX(b.ETYR) as ETYR, MAX(b.ETHR) as ETHR, MAX(b.ETRP) as ETRP, MAX(b.EVAL) as EVAL, MAX(b.EARG) as EARG, MAX(b.EHIS) as EHIS, MAX(b.EEA) as EEA, MAX(b.EALA) as EALA, MAX(b.EASP) as EASP, MAX(b.EGLU) as EGLU, MAX(b.EGLY) as EGLY, MAX(b.EPRO) as EPRO, MAX(b.ESER) as ESER, MAX(b.ENA) as ENA, MAX(b.EH) as EH, MAX(b.EP) as EP, MAX(b.F40) as F40, MAX(b.F60) as F60, MAX(b.F80) as F80, MAX(b.F100) as F100, MAX(b.F120) as F120, MAX(b.F140) as F140, MAX(b.F150) as F150, MAX(b.F160) as F160, MAX(b.F170) as F170, MAX(b.F180) as F180, MAX(b.F200) as F200, MAX(b.F220) as F220, MAX(b.F240) as F240, MAX(b.FS) as FS, MAX(b.F141) as F141, MAX(b.F151) as F151, MAX(b.F161) as F161, MAX(b.F171) as F171, MAX(b.F181) as F181, MAX(b.F201) as F201, MAX(b.F221) as F221, MAX(b.F241) as F241, MAX(b.FU) as FU, MAX(b.F162) as F162, MAX(b.F164) as F164, MAX(b.F182) as F182, MAX(b.F183) as F183, MAX(b.F184) as F184, MAX(b.F193) as F193, MAX(b.F202) as F202, MAX(b.F203) as F203, MAX(b.F204) as F204, MAX(b.F205) as F205, MAX(b.F222) as F222, MAX(b.F223) as F223, MAX(b.F224) as F224, MAX(b.F225) as F225, MAX(b.F226) as F226, MAX(b.FP) as FP, MAX(b.FK) as FK, MAX(b.FM) as FM, MAX(b.FL) as FL, MAX(b.FO3) as FO3, MAX(b.FO6) as FO6, MAX(b.FG) as FG, MAX(b.FC) as FC, MAX(b.GFPS) as GFPS, MAX(b.GKB) as GKB, MAX(b.GMKO) as GMKO, MAX(b.GP) as GP FROM Bls b WHERE substring(b.sbls, 1, 2) = ?1 GROUP BY substring(b.sbls, 1, 2)", nativeQuery = true)
    List<BLS> findMaxValuesByUntergruppe(String untergruppe);
    
    @Query(value = "SELECT row_number() over(order by substring(b.sbls, 1, 2)) as bls_id, null as st, null as ste, substring(b.sbls, 1, 2) as sbls , AVG(b.GCAL) as GCAL, AVG(b.GJ) as GJ, AVG(b.GCALZB) as GCALZB, AVG(b.GJZB) as GJZB, AVG(b.ZW) as ZW, AVG(b.ZE) as ZE, AVG(b.ZF) as ZF, AVG(b.ZK) as ZK, AVG(b.ZB) as ZB, AVG(b.ZM) as ZM, AVG(b.ZO) as ZO, AVG(b.ZA) as ZA, AVG(b.VA) as VA, AVG(b.VAR) as VAR, AVG(b.VAC) as VAC, AVG(b.VD) as VD, AVG(b.VE) as VE, AVG(b.VEAT) as VEAT, AVG(b.VK) as VK, AVG(b.VB1) as VB1, AVG(b.VB2) as VB2, AVG(b.VB3) as VB3, AVG(b.VB3A) as VB3A, AVG(b.VB5) as VB5, AVG(b.VB6) as VB6, AVG(b.VB7) as VB7, AVG(b.VB9G) as VB9G, AVG(b.VB12) as VB12, AVG(b.VC) as VC, AVG(b.MNA) as MNA, AVG(b.MK) as MK, AVG(b.MCA) as MCA, AVG(b.MMG) as MMG, AVG(b.MP) as MP, AVG(b.MS) as MS, AVG(b.MCL) as MCL, AVG(b.MFE) as MFE, AVG(b.MZN) as MZN, AVG(b.MCU) as MCU, AVG(b.MMN) as MMN, AVG(b.MF) as MF, AVG(b.MJ) as MJ, AVG(b.KAM) as KAM, AVG(b.KAS) as KAS, AVG(b.KAX) as KAX, AVG(b.KA) as KA, AVG(b.KMT) as KMT, AVG(b.KMF) as KMF, AVG(b.KMG) as KMG, AVG(b.KM) as KM, AVG(b.KDS) as KDS, AVG(b.KDM) as KDM, AVG(b.KDL) as KDL, AVG(b.KD) as KD, AVG(b.KMD) as KMD, AVG(b.KPOR) as KPOR, AVG(b.KPON) as KPON, AVG(b.KPG) as KPG, AVG(b.KPS) as KPS, AVG(b.KP) as KP, AVG(b.KBP) as KBP, AVG(b.KBH) as KBH, AVG(b.KBU) as KBU, AVG(b.KBC) as KBC, AVG(b.KBL) as KBL, AVG(b.KBW) as KBW, AVG(b.KBN) as KBN, AVG(b.EILE) as EILE, AVG(b.ELEU) as ELEU, AVG(b.ELYS) as ELYS, AVG(b.EMET) as EMET, AVG(b.ECYS) as ECYS, AVG(b.EPHE) as EPHE, AVG(b.ETYR) as ETYR, AVG(b.ETHR) as ETHR, AVG(b.ETRP) as ETRP, AVG(b.EVAL) as EVAL, AVG(b.EARG) as EARG, AVG(b.EHIS) as EHIS, AVG(b.EEA) as EEA, AVG(b.EALA) as EALA, AVG(b.EASP) as EASP, AVG(b.EGLU) as EGLU, AVG(b.EGLY) as EGLY, AVG(b.EPRO) as EPRO, AVG(b.ESER) as ESER, AVG(b.ENA) as ENA, AVG(b.EH) as EH, AVG(b.EP) as EP, AVG(b.F40) as F40, AVG(b.F60) as F60, AVG(b.F80) as F80, AVG(b.F100) as F100, AVG(b.F120) as F120, AVG(b.F140) as F140, AVG(b.F150) as F150, AVG(b.F160) as F160, AVG(b.F170) as F170, AVG(b.F180) as F180, AVG(b.F200) as F200, AVG(b.F220) as F220, AVG(b.F240) as F240, AVG(b.FS) as FS, AVG(b.F141) as F141, AVG(b.F151) as F151, AVG(b.F161) as F161, AVG(b.F171) as F171, AVG(b.F181) as F181, AVG(b.F201) as F201, AVG(b.F221) as F221, AVG(b.F241) as F241, AVG(b.FU) as FU, AVG(b.F162) as F162, AVG(b.F164) as F164, AVG(b.F182) as F182, AVG(b.F183) as F183, AVG(b.F184) as F184, AVG(b.F193) as F193, AVG(b.F202) as F202, AVG(b.F203) as F203, AVG(b.F204) as F204, AVG(b.F205) as F205, AVG(b.F222) as F222, AVG(b.F223) as F223, AVG(b.F224) as F224, AVG(b.F225) as F225, AVG(b.F226) as F226, AVG(b.FP) as FP, AVG(b.FK) as FK, AVG(b.FM) as FM, AVG(b.FL) as FL, AVG(b.FO3) as FO3, AVG(b.FO6) as FO6, AVG(b.FG) as FG, AVG(b.FC) as FC, AVG(b.GFPS) as GFPS, AVG(b.GKB) as GKB, AVG(b.GMKO) as GMKO, AVG(b.GP) as GP FROM Bls b WHERE substring(b.sbls, 1, 2) = ?1 GROUP BY substring(b.sbls, 1, 2)", nativeQuery = true)
    List<BLS> findAvgValuesByUntergruppe(String untergruppe);
    
    @Query(value = "SELECT row_number() over(order by substring(b.sbls, 1, 1)) as bls_id, null as st, null as ste, substring(b.sbls, 1, 1) as sbls , AVG(b.GCAL) as GCAL, AVG(b.GJ) as GJ, AVG(b.GCALZB) as GCALZB, AVG(b.GJZB) as GJZB, AVG(b.ZW) as ZW, AVG(b.ZE) as ZE, AVG(b.ZF) as ZF, AVG(b.ZK) as ZK, AVG(b.ZB) as ZB, AVG(b.ZM) as ZM, AVG(b.ZO) as ZO, AVG(b.ZA) as ZA, AVG(b.VA) as VA, AVG(b.VAR) as VAR, AVG(b.VAC) as VAC, AVG(b.VD) as VD, AVG(b.VE) as VE, AVG(b.VEAT) as VEAT, AVG(b.VK) as VK, AVG(b.VB1) as VB1, AVG(b.VB2) as VB2, AVG(b.VB3) as VB3, AVG(b.VB3A) as VB3A, AVG(b.VB5) as VB5, AVG(b.VB6) as VB6, AVG(b.VB7) as VB7, AVG(b.VB9G) as VB9G, AVG(b.VB12) as VB12, AVG(b.VC) as VC, AVG(b.MNA) as MNA, AVG(b.MK) as MK, AVG(b.MCA) as MCA, AVG(b.MMG) as MMG, AVG(b.MP) as MP, AVG(b.MS) as MS, AVG(b.MCL) as MCL, AVG(b.MFE) as MFE, AVG(b.MZN) as MZN, AVG(b.MCU) as MCU, AVG(b.MMN) as MMN, AVG(b.MF) as MF, AVG(b.MJ) as MJ, AVG(b.KAM) as KAM, AVG(b.KAS) as KAS, AVG(b.KAX) as KAX, AVG(b.KA) as KA, AVG(b.KMT) as KMT, AVG(b.KMF) as KMF, AVG(b.KMG) as KMG, AVG(b.KM) as KM, AVG(b.KDS) as KDS, AVG(b.KDM) as KDM, AVG(b.KDL) as KDL, AVG(b.KD) as KD, AVG(b.KMD) as KMD, AVG(b.KPOR) as KPOR, AVG(b.KPON) as KPON, AVG(b.KPG) as KPG, AVG(b.KPS) as KPS, AVG(b.KP) as KP, AVG(b.KBP) as KBP, AVG(b.KBH) as KBH, AVG(b.KBU) as KBU, AVG(b.KBC) as KBC, AVG(b.KBL) as KBL, AVG(b.KBW) as KBW, AVG(b.KBN) as KBN, AVG(b.EILE) as EILE, AVG(b.ELEU) as ELEU, AVG(b.ELYS) as ELYS, AVG(b.EMET) as EMET, AVG(b.ECYS) as ECYS, AVG(b.EPHE) as EPHE, AVG(b.ETYR) as ETYR, AVG(b.ETHR) as ETHR, AVG(b.ETRP) as ETRP, AVG(b.EVAL) as EVAL, AVG(b.EARG) as EARG, AVG(b.EHIS) as EHIS, AVG(b.EEA) as EEA, AVG(b.EALA) as EALA, AVG(b.EASP) as EASP, AVG(b.EGLU) as EGLU, AVG(b.EGLY) as EGLY, AVG(b.EPRO) as EPRO, AVG(b.ESER) as ESER, AVG(b.ENA) as ENA, AVG(b.EH) as EH, AVG(b.EP) as EP, AVG(b.F40) as F40, AVG(b.F60) as F60, AVG(b.F80) as F80, AVG(b.F100) as F100, AVG(b.F120) as F120, AVG(b.F140) as F140, AVG(b.F150) as F150, AVG(b.F160) as F160, AVG(b.F170) as F170, AVG(b.F180) as F180, AVG(b.F200) as F200, AVG(b.F220) as F220, AVG(b.F240) as F240, AVG(b.FS) as FS, AVG(b.F141) as F141, AVG(b.F151) as F151, AVG(b.F161) as F161, AVG(b.F171) as F171, AVG(b.F181) as F181, AVG(b.F201) as F201, AVG(b.F221) as F221, AVG(b.F241) as F241, AVG(b.FU) as FU, AVG(b.F162) as F162, AVG(b.F164) as F164, AVG(b.F182) as F182, AVG(b.F183) as F183, AVG(b.F184) as F184, AVG(b.F193) as F193, AVG(b.F202) as F202, AVG(b.F203) as F203, AVG(b.F204) as F204, AVG(b.F205) as F205, AVG(b.F222) as F222, AVG(b.F223) as F223, AVG(b.F224) as F224, AVG(b.F225) as F225, AVG(b.F226) as F226, AVG(b.FP) as FP, AVG(b.FK) as FK, AVG(b.FM) as FM, AVG(b.FL) as FL, AVG(b.FO3) as FO3, AVG(b.FO6) as FO6, AVG(b.FG) as FG, AVG(b.FC) as FC, AVG(b.GFPS) as GFPS, AVG(b.GKB) as GKB, AVG(b.GMKO) as GMKO, AVG(b.GP) as GP  FROM Bls b WHERE substring(b.sbls, 1, 1) = ?1 GROUP BY substring(b.sbls, 1, 1)", nativeQuery = true)
    List<BLS> findAvgValuesByHauptgruppe(String hauptgruppe);
    
    @Query(value = "SELECT 1 as bls_id, null as st, null as ste, null as sbls, AVG(b.GCAL) as GCAL, AVG(b.GJ) as GJ, AVG(b.GCALZB) as GCALZB, AVG(b.GJZB) as GJZB, AVG(b.ZW) as ZW, AVG(b.ZE) as ZE, AVG(b.ZF) as ZF, AVG(b.ZK) as ZK, AVG(b.ZB) as ZB, AVG(b.ZM) as ZM, AVG(b.ZO) as ZO, AVG(b.ZA) as ZA, AVG(b.VA) as VA, AVG(b.VAR) as VAR, AVG(b.VAC) as VAC, AVG(b.VD) as VD, AVG(b.VE) as VE, AVG(b.VEAT) as VEAT, AVG(b.VK) as VK, AVG(b.VB1) as VB1, AVG(b.VB2) as VB2, AVG(b.VB3) as VB3, AVG(b.VB3A) as VB3A, AVG(b.VB5) as VB5, AVG(b.VB6) as VB6, AVG(b.VB7) as VB7, AVG(b.VB9G) as VB9G, AVG(b.VB12) as VB12, AVG(b.VC) as VC, AVG(b.MNA) as MNA, AVG(b.MK) as MK, AVG(b.MCA) as MCA, AVG(b.MMG) as MMG, AVG(b.MP) as MP, AVG(b.MS) as MS, AVG(b.MCL) as MCL, AVG(b.MFE) as MFE, AVG(b.MZN) as MZN, AVG(b.MCU) as MCU, AVG(b.MMN) as MMN, AVG(b.MF) as MF, AVG(b.MJ) as MJ, AVG(b.KAM) as KAM, AVG(b.KAS) as KAS, AVG(b.KAX) as KAX, AVG(b.KA) as KA, AVG(b.KMT) as KMT, AVG(b.KMF) as KMF, AVG(b.KMG) as KMG, AVG(b.KM) as KM, AVG(b.KDS) as KDS, AVG(b.KDM) as KDM, AVG(b.KDL) as KDL, AVG(b.KD) as KD, AVG(b.KMD) as KMD, AVG(b.KPOR) as KPOR, AVG(b.KPON) as KPON, AVG(b.KPG) as KPG, AVG(b.KPS) as KPS, AVG(b.KP) as KP, AVG(b.KBP) as KBP, AVG(b.KBH) as KBH, AVG(b.KBU) as KBU, AVG(b.KBC) as KBC, AVG(b.KBL) as KBL, AVG(b.KBW) as KBW, AVG(b.KBN) as KBN, AVG(b.EILE) as EILE, AVG(b.ELEU) as ELEU, AVG(b.ELYS) as ELYS, AVG(b.EMET) as EMET, AVG(b.ECYS) as ECYS, AVG(b.EPHE) as EPHE, AVG(b.ETYR) as ETYR, AVG(b.ETHR) as ETHR, AVG(b.ETRP) as ETRP, AVG(b.EVAL) as EVAL, AVG(b.EARG) as EARG, AVG(b.EHIS) as EHIS, AVG(b.EEA) as EEA, AVG(b.EALA) as EALA, AVG(b.EASP) as EASP, AVG(b.EGLU) as EGLU, AVG(b.EGLY) as EGLY, AVG(b.EPRO) as EPRO, AVG(b.ESER) as ESER, AVG(b.ENA) as ENA, AVG(b.EH) as EH, AVG(b.EP) as EP, AVG(b.F40) as F40, AVG(b.F60) as F60, AVG(b.F80) as F80, AVG(b.F100) as F100, AVG(b.F120) as F120, AVG(b.F140) as F140, AVG(b.F150) as F150, AVG(b.F160) as F160, AVG(b.F170) as F170, AVG(b.F180) as F180, AVG(b.F200) as F200, AVG(b.F220) as F220, AVG(b.F240) as F240, AVG(b.FS) as FS, AVG(b.F141) as F141, AVG(b.F151) as F151, AVG(b.F161) as F161, AVG(b.F171) as F171, AVG(b.F181) as F181, AVG(b.F201) as F201, AVG(b.F221) as F221, AVG(b.F241) as F241, AVG(b.FU) as FU, AVG(b.F162) as F162, AVG(b.F164) as F164, AVG(b.F182) as F182, AVG(b.F183) as F183, AVG(b.F184) as F184, AVG(b.F193) as F193, AVG(b.F202) as F202, AVG(b.F203) as F203, AVG(b.F204) as F204, AVG(b.F205) as F205, AVG(b.F222) as F222, AVG(b.F223) as F223, AVG(b.F224) as F224, AVG(b.F225) as F225, AVG(b.F226) as F226, AVG(b.FP) as FP, AVG(b.FK) as FK, AVG(b.FM) as FM, AVG(b.FL) as FL, AVG(b.FO3) as FO3, AVG(b.FO6) as FO6, AVG(b.FG) as FG, AVG(b.FC) as FC, AVG(b.GFPS) as GFPS, AVG(b.GKB) as GKB, AVG(b.GMKO) as GMKO, AVG(b.GP) as GP  FROM Bls b", nativeQuery = true)
    BLS findAvgValuesGesamt();
    
    @Query("SELECT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b")
    List<BLSReduced> findAllReduced();
    
    @Query("SELECT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b WHERE substring(b.SBLS, 0, 0) = ?1")
    List<BLSReduced> findReducedByUntergruppe(String untergruppe);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g ")
    List<BLSReduced> findZutaten();
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.user u " +
           "JOIN g.hashtags h " +
           "WHERE u.username = :username " +
           "AND h.bez IN :hashtags")
    List<BLSReduced> findZutatenByUserAndHashtags(@Param("username") String username, @Param("hashtags") List<String> hashtags);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.hashtags h " +
           "WHERE h.bez IN :hashtags")
    List<BLSReduced> findZutatenByHashtags(@Param("hashtags") List<String> hashtags);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.user u " +
           "WHERE u.username = :username ")
    List<BLSReduced> findZutatenByUser(@Param("username") String username);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "WHERE g.kategorie = :kategorie")
    List<BLSReduced> findZutatenByKategorie(String kategorie);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.user u " +
           "WHERE u.username = :username and g.kategorie = :kategorie ")
    List<BLSReduced> findZutatenByUserAndKategorie(@Param("username") String username, @Param("kategorie") String kategorie);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.hashtags h " +
           "WHERE g.kategorie = :kategorie and h.bez IN :hashtags ")
    List<BLSReduced> findZutatenByHashtagsAndKategorie(@Param("hashtags") List<String> hashtags, @Param("kategorie") String kategorie);
    
    @Query("SELECT DISTINCT new de.ml.foodcare.model.BLSReduced(b.id, b.SBLS, b.ST) FROM BLS AS b " +
           "JOIN b.zutaten z " +
           "JOIN z.gericht g " +
           "JOIN g.hashtags h " +
           "JOIN g.user u " +
           "WHERE g.kategorie = :kategorie and h.bez IN :hashtags and u.username = :username")
    List<BLSReduced> findZutatenByHashtagsAndKategorieAndUsername(@Param("hashtags") List<String> hashtags, @Param("kategorie") String kategorie, @Param("username") String username);
    
}
